<?xml version="1.0"?><!--*-nxml-*-->
<!DOCTYPE manpage SYSTEM "xmltoman.dtd">
<?xml-stylesheet type="text/xsl" href="xmltoman.xsl" ?>

<!--
This file is part of PipeWire.
-->

<manpage name="pipewire.conf" section="5" desc="The PipeWire server configuration file">

  <synopsis>
    <p><file>$XDG_CONFIG_HOME/pipewire/pipewire.conf</file></p>
    <p><file>@PIPEWIRE_CONFIG_DIR@/pipewire.conf</file></p>
    <p><file>@PIPEWIRE_CONFDATADIR@/pipewire.conf</file></p>
  </synopsis>

  <description>
    <p>PipeWire is a service that facilitates sharing of multimedia content
       between devices and applications. </p>

    <p>On startup, the daemon reads a configuration file to configure
    itself. It executes a series of commands listed in the config
    file.</p>

    <p>The config files are loaded in the order listed in the SYNOPSIS.
    The environment variables PIPEWIRE_CONFIG_DIR, PIPEWIRE_CONFIG_PREFIX
    and PIPEWIRE_CONFIG_NAME can be used to specify an alternative config
    directory, subdirectory and file respectively.</p>
  </description>

  <section name="Configuration File Format">
    <p>The configuration file format is grouped into sections. A section
    is either a dictionary, {}, or an array, []. Dictionary and array
    entries are separated by whitespace and may be simple value
    assignment, an array or a dictionary. For example:
    </p>
    <p>name = value # simple assignment </p>
    <p>name = { key1 = value1 key2 = value2 } # a dictionary with two
      entries</p>
    <p>name = [ value1 value2 ] # an array with two entries</p>
    <p>name = [ { k = v1 } { k = v2 } ] # an array of dictionaries </p>
  </section>

  <section name="Configuration File Sections">
    <p><opt>context.properties</opt> (dictionary): These properties
      configure the pipewire instance.
    </p>
    <p><opt>context.spa-libs</opt> (dictionary): Maps plugin features with
      globs to a spa library.
    </p>
    <p><opt>context.modules</opt> (array): Each entry in the array is a
    dictionary with the <opt>name</opt> of the module to load, including
    optional <opt>args</opt> and <opt>flags</opt>. Most modules support
    being loaded multiple times.
    </p>
    <p><opt>context.objects</opt> (array): Each entry in the array is a
    dictionary containing the <opt>factory</opt> to create an object from
    and optional extra arguments specific to that factory.
    </p>
    <p><opt>context.exec</opt> (array): Each entry in the array is
    dictionary containing the <opt>path</opt> of a program to execute on
    startup and optional <opt>args</opt>. This array usually contains an
    entry to start the session manager.
    </p>
  </section>

  <section name="Authors">
    <p>The PipeWire Developers &lt;@PACKAGE_BUGREPORT@&gt;; PipeWire is available from <url href="@PACKAGE_URL@"/></p>
  </section>

  <section name="See also">
    <p>
      <manref name="pipewire" section="1"/>,
      <manref name="pw-mon" section="1"/>,
    </p>
  </section>

</manpage>
